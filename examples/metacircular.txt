LET boolean_true = \t f. t IN
LET boolean_false = \t f. f IN
LET boolean_not = \b t f. b f t IN

LET num_zero = num_sub 1 1 IN

LET fix = \f. (\x. f (x x)) (\x. f (x x)) IN
LET undefined = fix (\x. x) IN

LET pair_make = \x y p. p x y IN
LET pair_fst = \p. p (\x y. x) IN
LET pair_snd = \p. p (\x y. y) IN

LET list_nil = \c n. n IN
LET list_null = \l. l (\h t. boolean_false) boolean_true IN
LET list_length = \l. l (\h. num_add 1) num_zero IN
LET list_cons = \x l c n. c x (l c n) IN
LET list_head = \l. l (\h t. h) undefined IN
LET list_tail = \l. pair_fst (l
        (\h p. pair_make (pair_snd p) (list_cons h (pair_snd p)))
        (pair_make list_nil list_nil)) IN
LET list_drop = fix (\rec n l.
        cmp_lt n 1 l (rec (num_sub n 1) (list_tail l))) IN
LET list_index = \n l. list_head (list_drop n l) IN
LET list_map = \f l c n. l (\h t. c (f h) t) n IN
LET list_concat = \xss. xss (\xs acc. xs list_cons acc) list_nil IN
LET list_concat_map = \f l. list_concat (list_map f l) IN
LET list_filter = \p l c n. l (\h t. (p h) (c h t) t) n IN

LET set_empty = list_nil IN
LET set_singleton = \x. list_cons x list_nil IN
LET set_size = list_length IN
LET set_any = \p l. boolean_not (list_null (list_filter p l)) IN
LET set_insert = \eq x l. (set_any (eq x) l) l (list_cons x l) IN
LET set_union = \eq l. l (\x acc. set_insert eq x acc) IN
LET set_to_list = \l. l IN
LET list_to_set = \eq l. l (set_insert eq) set_empty IN

LET dir_right = \r d l u. r IN
LET dir_down = \r d l u. d IN
LET dir_left = \r d l u. l IN
LET dir_up = \r d l u. u IN
LET dir_turn_right = \dir r d l u. dir d l u r IN
LET dir_turn_left = \dir r d l u. dir u r d l IN

LET pos_make = pair_make IN
LET pos_x = pair_fst IN
LET pos_y = pair_snd IN
LET pos_eq = \p q. cmp_eq (pos_x p) (pos_x q)
        (cmp_eq (pos_y p) (pos_y q))
        boolean_false IN
LET pos_move = \dir pos. dir
        (pos_make (num_add (pos_x pos) 1) (pos_y pos))     # R
        (pos_make (pos_x pos) (num_add (pos_y pos) 1))     # D
        (pos_make (num_sub (pos_x pos) 1) (pos_y pos))     # L
        (pos_make (pos_x pos) (num_sub (pos_y pos) 1)) IN  # U
LET pos_neighbours = \pos.
        list_cons (pos_move dir_right pos) (
        list_cons (pos_move dir_down pos) (
        list_cons (pos_move dir_left pos) (
        list_cons (pos_move dir_up pos) list_nil))) IN

LET pattern_aaaa = 1 IN
LET pattern_aaab = 2 IN
LET pattern_aaba = 3 IN
LET pattern_aabb = 4 IN
LET pattern_aabc = 5 IN
LET pattern_abaa = 6 IN
LET pattern_abab = 7 IN
LET pattern_abac = 8 IN
LET pattern_abba = 9 IN
LET pattern_abbb = 10 IN
LET pattern_abbc = 11 IN
LET pattern_abca = 12 IN
LET pattern_abcb = 13 IN
LET pattern_abcc = 14 IN
LET pattern_abcd = 15 IN

LET pattern_make = \a x y z.
        cmp_eq x a
            (cmp_eq y a
                (cmp_eq z a pattern_aaaa pattern_aaab)
                (cmp_eq z a
                    (pattern_aaba)
                    (cmp_eq z y pattern_aabb pattern_aabc)))
            (cmp_eq y a
                (cmp_eq z a
                    pattern_abaa
                    (cmp_eq z x pattern_abab pattern_abac))
                (cmp_eq y x
                    (cmp_eq z a
                        pattern_abba
                        (cmp_eq z x pattern_abbb pattern_abbc))
                    (cmp_eq z a
                        pattern_abca
                        (cmp_eq z x
                            pattern_abcb
                            (cmp_eq z y
                                pattern_abcc
                                pattern_abcd))))) IN

LET turnstyle_front = \dir. dir
        (pos_move dir_right)  # R
        (pos_move dir_down)   # D
        (pos_move dir_left)   # L
        (pos_move dir_up) IN  # U
LET turnstyle_left = \dir. turnstyle_front (dir_turn_left dir) IN
LET turnstyle_right = \dir. turnstyle_front (dir_turn_right dir) IN

LET newline = 10 IN
LET in_line = fix (\rec k err. in_char
     (\c. cmp_eq c newline (k list_nil) (rec (\l. k (list_cons c l)) err))
     err) IN
LET out_line = \l k. l out_char (out_char newline k) IN
LET in_lines = fix (\rec k. in_line
        (\l. rec (\t. k (list_cons l t)))
        (k list_nil)) IN
LET out_lines = \l k. l out_line k IN

LET image_dimensions = \img.
        pair_make (list_length (list_head img)) (list_length img) IN
LET image_dimensions_to_initial_pos = \dims.
        pair_make num_zero (num_floor ((num_div (pair_snd dims)) 2)) IN
LET image_index = \pos img.
        list_index (pos_x pos) (list_index (pos_y pos) img) IN

LET turnstyle_pattern = \dir pos img. pattern_make
        (image_index (turnstyle_left dir pos) img)
        (image_index pos img)
        (image_index (turnstyle_front dir pos) img)
        (image_index (turnstyle_right dir pos) img) IN

LET dimensions_inside = \dims pos.
        # boolean_false IN
        cmp_lt (pos_x pos) num_zero boolean_false (
        cmp_gte (pos_x pos) (pair_fst dims) boolean_false (
        cmp_lt (pos_y pos) num_zero boolean_false (
        cmp_gte (pos_y pos) (pair_snd dims) boolean_false boolean_true))) IN

LET image_area = \dims img pos.
        LET color = image_index pos img IN
        LET go = fix (\rec visited fringe.
                cmp_eq (set_size fringe) num_zero
                (set_size visited)
                (LET next_visited = set_union pos_eq visited fringe IN
                 LET next =
                        list_to_set pos_eq (
                        list_filter (\p. boolean_not (set_any (pos_eq p) next_visited)) (
                        list_filter (\p. cmp_eq (image_index p img) color) (
                        list_filter (\p. dimensions_inside dims p) (
                        list_concat_map pos_neighbours (
                        set_to_list fringe))))) IN
                    rec next_visited next)) IN
        go set_empty (set_singleton pos) IN

LET vars_lookup = \key l. l
        (\h t. cmp_eq key (pair_fst h) (pair_snd h) t)
        undefined IN
LET vars_insert = \key val l.
        list_cons (pair_make key val) (
        list_filter (\p. boolean_not (cmp_eq key (pair_fst p))) l) IN

LET turnstyle_prim = \modul opcode.
        (cmp_eq modul 2
            (cmp_eq opcode 1 out_num out_char)
        (cmp_eq modul 3
            (cmp_eq opcode 1 num_add
            (cmp_eq opcode 2 num_sub
            (cmp_eq opcode 3 num_mul
            (cmp_eq opcode 4 num_div undefined)))))
        undefined) IN


LET turnstyle_eval = fix (\rec dims img vars dir pos.
        LET pattern = turnstyle_pattern dir pos img IN
        (cmp_lte pattern 8
            # [1 .. 8]
            (cmp_lte pattern 4
                # [1 .. 4]
                (cmp_lte pattern 2
                    # [1 .. 2]
                    undefined
                    # [3 .. 4]
                    (cmp_eq pattern 3
                        # [3]: aaba - var
                        (vars_lookup (image_index (turnstyle_front dir pos) img) vars)
                        # [4] - aabb - id
                        (rec dims img vars (dir_turn_left dir) (turnstyle_left dir pos))))
                # [5 .. 8]
                (cmp_lte pattern 6
                    # [5 .. 6]
                    (cmp_eq pattern 5
                        # [5]
                        undefined
                        # [6]: abaa - var
                        (vars_lookup (image_index pos img) vars))
                    # [7 .. 8]
                    (cmp_eq pattern 7
                        # [7]: abab - id right
                        (rec dims img vars (dir_turn_right dir) (turnstyle_right dir pos))
                        # [8]: app
                        ((rec dims img vars (dir_turn_left dir) (turnstyle_left dir pos))
                            (rec dims img vars dir (turnstyle_front dir pos))))))
            # [9 .. 15]
            (cmp_lte pattern 12
                # [9 .. 12]
                (cmp_lte pattern 10
                    # [9 .. 10]
                    (cmp_eq pattern 9
                        # [9]: id
                        (rec dims img vars dir (turnstyle_front dir pos))
                        undefined)
                    # [11 .. 12]
                    (cmp_eq pattern 11
                        # [11]: abbc - lam
                        (\val.
                            LET key = image_index pos img IN
                            LET new_vars = vars_insert key val vars IN
                            rec dims img new_vars dir (turnstyle_front dir pos))
                        # [12]: app
                        ((rec dims img vars (dir_turn_left dir) (turnstyle_left dir pos))
                            (rec dims img vars (dir_turn_right dir) (turnstyle_right dir pos)))))
                # [13 .. 15]
                (cmp_lte pattern 14
                    # [13 .. 14]
                    (cmp_eq pattern 13
                        # [13]
                        undefined
                        # [14]: app
                        ((rec dims img vars dir (turnstyle_front dir pos))
                            (rec dims img vars (dir_turn_right dir) (turnstyle_right dir pos))))
                    # [15]: sym
                    (LET al = image_area dims img (turnstyle_left dir pos) IN
                     LET af = image_area dims img (turnstyle_front dir pos) IN
                     LET ar = image_area dims img (turnstyle_right dir pos) IN
                        (cmp_eq al 1
                            af  # TODO: pow
                            (turnstyle_prim af ar))))))) IN

in_lines (\img.
    LET dims = image_dimensions img IN
    LET pos = image_dimensions_to_initial_pos dims IN
    turnstyle_eval dims img list_nil dir_right pos)
